// <auto-generated />
using System;
using System.Collections.Generic;
using Deopeia.Product.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Deopeia.Product.Infrastructure.Migrations
{
    [DbContext(typeof(ProductContext))]
    partial class ProductContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Deopeia.Common.Domain.Files.FileResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_file_resource");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_file_resource_type");

                    b.ToTable("file_resource", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Deopeia.Product.Domain.Instruments.Instrument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("base_asset");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quote_asset");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.ComplexProperty<Dictionary<string, object>>("PriceConstraints", "Deopeia.Product.Domain.Instruments.Instrument.PriceConstraints#PriceConstraints", b1 =>
                        {
                            b1.Property<decimal>("TickSize")
                                .HasColumnType("numeric")
                                .HasColumnName("price_constraints_tick_size");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("QuantityConstraints", "Deopeia.Product.Domain.Instruments.Instrument.QuantityConstraints#QuantityConstraints", b1 =>
                        {
                            b1.Property<decimal>("MinNotional")
                                .HasColumnType("numeric")
                                .HasColumnName("quantity_constraints_min_notional");

                            b1.Property<decimal>("MinQuantity")
                                .HasColumnType("numeric")
                                .HasColumnName("quantity_constraints_min_quantity");

                            b1.Property<decimal>("StepSize")
                                .HasColumnType("numeric")
                                .HasColumnName("quantity_constraints_step_size");
                        });

                    b.HasKey("Id")
                        .HasName("pk_instrument");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasDatabaseName("ix_instrument_symbol");

                    b.ToTable("instrument", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Deopeia.Product.Domain.Instruments.InstrumentLocalization", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("EntityId", "Culture")
                        .HasName("pk_instrument_localization");

                    b.ToTable("instrument_localization", (string)null);
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Files.Image", b =>
                {
                    b.HasBaseType("Deopeia.Common.Domain.Files.FileResource");

                    b.ToTable("file_resource", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Deopeia.Product.Domain.Instruments.Spots.Spot", b =>
                {
                    b.HasBaseType("Deopeia.Product.Domain.Instruments.Instrument");

                    b.ToTable("instrument", (string)null);

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Deopeia.Product.Domain.Instruments.InstrumentLocalization", b =>
                {
                    b.HasOne("Deopeia.Product.Domain.Instruments.Instrument", null)
                        .WithMany("Localizations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instrument_localization_instrument_instrument_id");
                });

            modelBuilder.Entity("Deopeia.Product.Domain.Instruments.Instrument", b =>
                {
                    b.Navigation("Localizations");
                });
#pragma warning restore 612, 618
        }
    }
}
