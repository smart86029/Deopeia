// <auto-generated />
using System;
using System.Net;
using Deopeia.Identity.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Deopeia.Identity.Infrastructure.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Deopeia.Common.Domain.Auditing.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<IPAddress>("IPAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_audit_trail");

                    b.ToTable("audit_trail", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Files.FileResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_file_resource");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_file_resource_type");

                    b.ToTable("file_resource", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Finance.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("Decimals")
                        .HasColumnType("integer")
                        .HasColumnName("decimals");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric")
                        .HasColumnName("exchange_rate");

                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_currency");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Finance.CurrencyLocale", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("text")
                        .HasColumnName("currency_code");

                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("EntityId", "Culture")
                        .HasName("pk_currency_locale");

                    b.ToTable("currency_locale", (string)null);
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Measurement.Unit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_unit");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Measurement.UnitLocale", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("text")
                        .HasColumnName("unit_code");

                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("EntityId", "Culture")
                        .HasName("pk_unit_locale");

                    b.ToTable("unit_locale", (string)null);
                });

            modelBuilder.Entity("Deopeia.Common.Events.EventLog", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EventContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_content");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type_name");

                    b.Property<string>("EventTypeNamespace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type_namespace");

                    b.Property<int>("PublishCount")
                        .HasColumnType("integer")
                        .HasColumnName("publish_count");

                    b.Property<int>("PublishState")
                        .HasColumnType("integer")
                        .HasColumnName("publish_state");

                    b.HasKey("EventId")
                        .HasName("pk_event_log");

                    b.ToTable("event_log", (string)null);
                });

            modelBuilder.Entity("Deopeia.Common.Localization.LocaleResource", b =>
                {
                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.HasKey("Culture", "Type", "Code")
                        .HasName("pk_locale_resource");

                    b.ToTable("locale_resource", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("GrantTypes")
                        .HasColumnType("integer")
                        .HasColumnName("grant_types");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RedirectUris")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("redirect_uris");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("scopes");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.HasKey("Id")
                        .HasName("pk_client");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Grants.Grant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset?>("ConsumedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("scopes");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_grant");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_grant_client_id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_grant_key");

                    b.ToTable("grant", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Permissions.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Permissions.PermissionLocale", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("text")
                        .HasColumnName("permission_code");

                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("EntityId", "Culture")
                        .HasName("pk_permission_locale");

                    b.ToTable("permission_locale", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Roles.RoleLocale", b =>
                {
                    b.Property<string>("EntityId")
                        .HasColumnType("text")
                        .HasColumnName("role_code");

                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("EntityId", "Culture")
                        .HasName("pk_role_locale");

                    b.ToTable("role_locale", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Roles.RolePermission", b =>
                {
                    b.Property<string>("RoleCode")
                        .HasColumnType("text")
                        .HasColumnName("role_code");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("text")
                        .HasColumnName("permission_code");

                    b.Property<string>("PermissionId")
                        .HasColumnType("text")
                        .HasColumnName("permission_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("RoleCode", "PermissionCode")
                        .HasName("pk_role_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_permission_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permission_role_id");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Users.Authenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("BindingStatus")
                        .HasColumnType("integer")
                        .HasColumnName("binding_status");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("integer")
                        .HasColumnName("error_count");

                    b.Property<DateTimeOffset?>("LockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_at");

                    b.Property<string>("SecretKey")
                        .HasColumnType("text")
                        .HasColumnName("secret_key_ciphertext");

                    b.HasKey("Id")
                        .HasName("pk_authenticator");

                    b.ToTable("authenticator", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthenticatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("authenticator_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("AuthenticatorId")
                        .HasDatabaseName("ix_user_authenticator_id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_user_name");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Users.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_refresh_token");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("ix_user_refresh_token_refresh_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_refresh_token_user_id");

                    b.ToTable("user_refresh_token", (string)null);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleCode")
                        .HasColumnType("text")
                        .HasColumnName("role_code");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleCode")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Auditing.DataAccessAuditTrail", b =>
                {
                    b.HasBaseType("Deopeia.Common.Domain.Auditing.AuditTrail");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<string>("Keys")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("keys");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("old_values");

                    b.Property<string>("PropertyNames")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("property_names");

                    b.ToTable("audit_trail", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Files.Image", b =>
                {
                    b.HasBaseType("Deopeia.Common.Domain.Files.FileResource");

                    b.ToTable("file_resource", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Grants.AuthorizationCodes.AuthorizationCode", b =>
                {
                    b.HasBaseType("Deopeia.Identity.Domain.Grants.Grant");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_challenge");

                    b.Property<string>("CodeChallengeMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_challenge_method");

                    b.Property<string>("Nonce")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nonce");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("redirect_uri");

                    b.ToTable("grant", (string)null);

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Grants.RefreshTokens.RefreshToken", b =>
                {
                    b.HasBaseType("Deopeia.Identity.Domain.Grants.Grant");

                    b.ToTable("grant", (string)null);

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Finance.CurrencyLocale", b =>
                {
                    b.HasOne("Deopeia.Common.Domain.Finance.Currency", null)
                        .WithMany("Locales")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_currency_locale_currency_currency_id");
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Measurement.UnitLocale", b =>
                {
                    b.HasOne("Deopeia.Common.Domain.Measurement.Unit", null)
                        .WithMany("Locales")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_unit_locale_unit_unit_id");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Permissions.PermissionLocale", b =>
                {
                    b.HasOne("Deopeia.Identity.Domain.Permissions.Permission", null)
                        .WithMany("Locales")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_locale_permission_permission_id");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Roles.RoleLocale", b =>
                {
                    b.HasOne("Deopeia.Identity.Domain.Roles.Role", null)
                        .WithMany("Locales")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_locale_role_role_id");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Roles.RolePermission", b =>
                {
                    b.HasOne("Deopeia.Identity.Domain.Permissions.Permission", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("fk_role_permission_permission_permission_id");

                    b.HasOne("Deopeia.Identity.Domain.Roles.Role", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_permission_role_role_id");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Users.User", b =>
                {
                    b.HasOne("Deopeia.Identity.Domain.Users.Authenticator", "Authenticator")
                        .WithMany()
                        .HasForeignKey("AuthenticatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_authenticator_authenticator_id");

                    b.Navigation("Authenticator");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Users.UserRefreshToken", b =>
                {
                    b.HasOne("Deopeia.Identity.Domain.Users.User", null)
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_refresh_token_user_user_id");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Users.UserRole", b =>
                {
                    b.HasOne("Deopeia.Identity.Domain.Roles.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("Deopeia.Identity.Domain.Users.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Finance.Currency", b =>
                {
                    b.Navigation("Locales");
                });

            modelBuilder.Entity("Deopeia.Common.Domain.Measurement.Unit", b =>
                {
                    b.Navigation("Locales");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Permissions.Permission", b =>
                {
                    b.Navigation("Locales");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Roles.Role", b =>
                {
                    b.Navigation("Locales");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Deopeia.Identity.Domain.Users.User", b =>
                {
                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
